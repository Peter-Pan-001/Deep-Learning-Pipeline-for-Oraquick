"""
1) https://github.com/datitran/raccoon_dataset/blob/master/xml_to_csv.py

Script adapted from 1) with modifications. The script takes XML input, and
converts them into CSV format. The CSV format is required for the creation
of TFRecords. Check generate_tfrecord.py for more information on this.

An example of the XML format, generated by RectLabel software (image annotation
software that is widely used in applications of object detection), is given
below. Indexes used in the xml_to_df function should be changed if a different
XML format is used. Especially, the intermediary tags between 'name' and 'bndbox'
tags inside the 'object' tag tend to change in number across different softwares.

<annotation>
    <folder>...</folder>
    <filename>...</filename>
    <source>
        <database>Unknown</database>
    </source>
    <size>
        <width>3024</width>
        <height>4032</height>
        <depth>3</depth>
    </size>
    <segmented>0</segmented>
    <object>
        <name>TestKit</name>
        <pose>Unspecified</pose>
        <truncated>0</truncated>
        <occluded>0</occluded>
        <difficult>0</difficult>
        <bndbox>
            <xmin>537</xmin>
            <ymin>962</ymin>
            <xmax>2666</xmax>
            <ymax>3525</ymax>
        </bndbox>
    </object>
</annotation>

Usage:
  # From tensorflow/models/
  # Convert to csv for train data:
  python xml_to_csv.py --xml_input=training_labels_xml --output_path=training_labels.csv
  # Convert to csv for test data:
  python xml_to_csv.py --xml_input=testing_labels_xml --output_path=testing_labels.csv
"""

# Standard imports
import glob
import pandas as pd
import xml.etree.ElementTree as ET
import tensorflow as tf

# Define flags that will be inputted by the user
flags = tf.app.flags
flags.DEFINE_string('xml_input', '', 'Path to XML data')
flags.DEFINE_string('output_path', '', 'Path to output output CSV file')
FLAGS = flags.FLAGS

def xml_to_df(path):
    """
    Function to convert the specified XML data into data frame that resembles
    and is interpretable by the CSV format.
    @param path: The path to the XML data
    @return xml_df (DataFrame): Return CSV format as a Pandas DataFrame
    """
    xml_list = []
    for xml_file in glob.glob(path + '/*.xml'): # for each XML file in the specified path
        # print(xml_file) # debugging

        # Get the XML element tree, and the root of this tree
        tree = ET.parse(xml_file)
        root = tree.getroot() # annotation tag

        # Get the object tag(s), instances of the detected objects in the corresponding image
        for member in root.findall('object'): # for each seperate object tag (can also be singular)
            # print(member) # debugging

            # Define column names of the CSV file; values that will be character/comma seperated
            column_names = ['filename', 'width', 'height', 'class', 'xmin', 'ymin', 'xmax', 'ymax']

            # Construct the list corresponding to the column names
            value = (root.find('filename').text, # filename
                     int(root.find('size')[0].text), # width
                     int(root.find('size')[1].text), # height
                     member[0].text, # class
                     int(member[5][0].text), # xmin
                     int(member[5][1].text), # ymin
                     int(member[5][2].text), # xmax
                     int(member[5][3].text)) # ymax

            xml_list.append(value)

    # Convert the XML list into Pandas DataFrame by matching values with the column names
    xml_df = pd.DataFrame(xml_list, columns=column_names)
    return xml_df

def main(_):
    """
    Main function that will be executed with parameters as those
    specified in FLAGS. Calls defined methods to convert from XML to CSV.
    """
    # Create an XML data frame, which represents the CSV format
    xml_df = xml_to_df(FLAGS.xml_input)
    print(FLAGS.xml_input)
    print(FLAGS.output_path)
    # Convert the data frame into CSV format, and save to the output path
    xml_df.to_csv(FLAGS.output_path, index=None)
    print('Successfully converted xml to csv!')

if __name__ == '__main__':
    tf.app.run()
